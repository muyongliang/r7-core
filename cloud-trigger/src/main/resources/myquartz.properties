#调度器的实例名(instanceName)
org.quartz.scheduler.instanceName = MyScheduler
#设置调度器的实例ID (instanceId)如果使用集群，instanceId必须唯一，设置成AUTO
org.quartz.scheduler.instanceId = AUTO
#instanceId的生成方式，默认是org.quartz.simpl.SimpleInstanceIdGenerator
org.quartz.scheduler.instanceIdGenerator.class=org.quartz.simpl.SimpleInstanceIdGenerator
#============================================================================
# Configure ThreadPool
#============================================================================
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 5
org.quartz.threadPool.threadPriority = 5

#============================================================================
# Configure JDBCJobStore的失火处理线程
#============================================================================
org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer = true

#============================================================================
#  表示调度程序的主线程是守护线程，默认是false
#============================================================================
org.quartz.scheduler.makeSchedulerThreadDaemon = true

#============================================================================
# Configure 同一时刻可以触发的最大触发器数量
#============================================================================
org.quartz.scheduler.batchTriggerAcquisitionMaxCount = 5
#如果最大触发器数量> 1，并且使用JDBC JobStore，则下面值必须为true避免数据损坏
org.quartz.jobStore.acquireTriggersWithinLock = true

#============================================================================
#是否使用集群（如果项目只部署到 一台服务器，就不用了）
#============================================================================
org.quartz.jobStore.isClustered = true

#============================================================================
#调度实例失效的检查时间间隔
#============================================================================
org.quartz.jobStore.clusterCheckinInterval = 20000

#============================================================================
#容许的最大作业延长时间
#============================================================================
org.quartz.jobStore.misfireThreshold = 60000
# 持久化配置（存储方式使用JobStoreTX，也就是数据库）
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
# 驱动器方言 数据库平台
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate

#数据库中quartz表的表名前缀
org.quartz.jobStore.tablePrefix = QRTZ_

#spring.quartz.job-store-type = jdbc
#spring.quartz.jdbc.initialize-schema = always
#============================================================================
# Configure Datasources配置数据源(可被覆盖，如果在schedulerFactoryBean指定数据源)
#============================================================================
#org.quartz.dataSource.myDS.driver = com.mysql.cj.jdbc.Driver
#org.quartz.dataSource.myDS.URL = jdbc:mysql://192.168.1.48:3306/core?seUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
#org.quartz.dataSource.myDS.user = root
#org.quartz.dataSource.myDS.password = root.R7db@192.168.1.48
#org.quartz.dataSource.myDS.maxConnections = 10
###数据库别名 随便取
#org.quartz.jobStore.dataSource = myDS

#============================================================================
#  表示指定产生的线程是否继承初始化线程的上下文classLoader
#============================================================================
#org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer = true

#============================================================================
#  指示JDBCJobStore JobDataMaps中的所有值均为字符串
#  避免了将非String类序列化为BLOB可能引起的类版本控制问题
#============================================================================
org.quartz.jobStore.useProperties = true
#org.quartz.dataSource.dataSource.connectionProvider.class=com.r7.core.trigger.config.MyConnectionProvider
#============================================================================
#  配置全局JobListener
#============================================================================
#自定义job监听器的路径
org.quartz.jobListener.NAME.class = com.r7.core.trigger.config.MyCronJobListener
#org.quartz.jobListener.NAME.propName = propValue
#org.quartz.jobListener.NAME.prop2Name = prop2Value